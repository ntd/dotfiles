let s:cpo_save=&cpo
set cpo&vim

runtime vimpagerrc              " Common (view) settings go into vimpagerrc

let g:netrw_dirhistmax=0        " Avoid .netrwhist creation
set dir=$HOME/.vim/tmp/swap     " Directory for temporary files

                                " vimdiff remapping
nnoremap dn ]c
nnoremap dN [c
nnoremap du :diffupdate<CR>

                                " Split management
nnoremap tH :leftabove vsplit<CR>
nnoremap tJ :rightbelow split<CR>
nnoremap tK :leftabove split<CR>
nnoremap tL :rightbelow vsplit<CR>
nnoremap th <C-W>h
nnoremap tj <C-W>j
nnoremap tk <C-W>k
nnoremap tl <C-W>l
nnoremap tx :hide<CR>

                                " Tab management
nnoremap Th :tabprevious<CR>
nnoremap Tj :tabclose<CR>
nnoremap Tk :tabnew<CR>
nnoremap Tl :tabnext<CR>

set modeline
set notimeout                   " Don't timeout on mappings
set ttimeout                    " Do timeout on terminal key codes
set timeoutlen=100              " Timeout after 100 msec

set listchars=tab:↔­,trail:·,precedes:⇐,extends:⇒
set list
set showmode
set showcmd
set showmatch
if v:version >= 703
  set relativenumber
endif
set ruler                       " Ignored because of lightline
set laststatus=2

set autoindent
set shiftwidth=4
set softtabstop=4
set expandtab
set foldnestmax=1
set foldminlines=5

set wrap
set textwidth=72                " Canonical right column
set hidden
set backspace=indent,eol,start

if exists('&colorcolumn')
    set colorcolumn=72
endif

set backupdir=$HOME/.vim/tmp/backup
set backup
set writebackup


" Directly borrowed from https://github.com/tpope/vim-sensible
set incsearch
if maparg('<C-L>', 'n') ==# ''  " Use <C-L> to clear search highlighting
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" Do not restart from BOF when searching
set nowrapscan

set display+=lastline
set sessionoptions-=options

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j          " Delete comment character when
                                " joining commented lines
endif


let g:proj_flags='mstvcg'       " 'Project' flags
let g:proj_file='.config/vimproject'
let g:proj_split='vs'           " Split vertically

filetype plugin indent on

" Any private customizations go into vimrc-private
if filereadable($HOME . '/.vimrc-private')
    " Kept for backward compatibility
    source $HOME/.vimrc-private
else
    runtime vimrc-private
endif

if has('python3')
  " Vdebug customizations
  let g:vdebug_options = {
  \     'watch_window_style': 'compact',
  \ }
  let g:vdebug_features = {
  \     'max_data': 1024,
  \     'max_children': 128,
  \ }
  autocmd BufNew DebuggerStack set nowrap
else
  " Skip Vdebug loading if python is not available to avoid annoying
  " messages (see https://github.com/vim-vdebug/vdebug/pull/297)
  let g:is_vdebug_loaded=1
endif

" CoC settings, adapted from the example in home page
set hidden
set updatetime=300
set shortmess+=c
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<C-o>'

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

if exists('*complete_info')
  inoremap <expr><cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr><cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Configure vim-lsp
if executable('clangd')
  au User lsp_setup call lsp#register_server({
  \     'name': 'clangd',
  \     'cmd': {server_info->['clangd', '-background-index']},
  \     'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
  \ })
endif

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> gp <plug>(lsp-previous-diagnostic)
  nmap <buffer> gn <plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  inoremap <buffer> <expr><c-f> lsp#scroll(+4)
  inoremap <buffer> <expr><c-d> lsp#scroll(-4)
  let g:lsp_format_sync_timeout = 1000
  autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
  au!
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" Append the git active branch to the status line
let g:lightline = {
\     'active': {
\         'left': [ [ 'mode', 'paste' ],
\                   [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
\     },
\     'component_function': {
\         'gitbranch': 'gitbranch#name',
\     },
\ }

" CltrP customizations
let g:ctrlp_custom_ignore = '\v/(framework|cms|vendor)$'

let &cpo=s:cpo_save
unlet s:cpo_save
