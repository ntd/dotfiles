let s:cpo_save=&cpo
set cpo&vim

runtime vimpagerrc              " Common (view) settings go into vimpagerrc

let g:netrw_dirhistmax=0        " Avoid .netrwhist creation
set dir=$HOME/.vim/tmp/swap     " Directory for temporary files

if has('nvim') || v:version >= 800
    " Enable builtin packages on modern Vim/NeoVim
    packadd! PHP-Indenting-for-VIm
    packadd! clibs.vim
    packadd! ctrlp.vim
    packadd! gnome-doc.vim
    packadd! gtk-vim-syntax
    packadd! matchit.zip
    packadd! mesonic
    packadd! tabular
    packadd! vdebug
    packadd! vim-enhanced-diff
    packadd! vim-gitbranch
    packadd! vim-ledger
    packadd! vim-lua-ftplugin
    packadd! vim-lua
    packadd! vim-misc
    packadd! vim-phpqa
    packadd! vim-project
    packadd! vim-sleuth
    packadd! vim-ss
    packadd! vim-surround
    if !has('nvim')
        " Plain Vim-only dependencies
        packadd lightline.vim
    endif
else
    " Enable pathogen only on old Vim
    runtime pack/vendor/opt/vim-pathogen/autoload/pathogen.vim
    call pathogen#infect('pack/vendor/opt/{}')
endif

                                " vimdiff remapping
noremap <silent>-j ]c
noremap <silent>-k [c
noremap -h :diffget<CR>
noremap -l :diffput<CR>

                                " Split management
noremap tH <cmd>leftabove vsplit<CR>
noremap tJ <cmd>rightbelow split<CR>
noremap tK <cmd>leftabove split<CR>
noremap tL <cmd>rightbelow vsplit<CR>
noremap <silent>th <cmd>wincmd h<CR>
noremap <silent>tj <cmd>wincmd j<CR>
noremap <silent>tk <cmd>wincmd k<CR>
noremap <silent>tl <cmd>wincmd l<CR>
noremap tx <cmd>hide<CR>
noremap <silent>t<right> <cmd>10wincmd ><CR>
noremap <silent>t<left>  <cmd>10wincmd <<CR>
noremap <silent>t<up>    <cmd>5wincmd +<CR>
noremap <silent>t<down>  <cmd>5wincmd -<CR>

                                " Tab management
noremap TL :tabnew<CR>
noremap TH :-tabnew<CR>
noremap Tx :tabclose<CR>
noremap Th :tabprevious<CR>
noremap Tl :tabnext<CR>

set modeline
set notimeout                   " Don't timeout on mappings
set ttimeout                    " Do timeout on terminal key codes
set timeoutlen=100              " Timeout after 100 msec

set listchars=tab:↔­,trail:·,precedes:⇐,extends:⇒
set list
set showmode
set showcmd
set showmatch
set hidden
set updatetime=300
set shortmess+=c

if v:version >= 703
  set relativenumber
  set number
endif
set ruler                       " Ignored because of lightline
set laststatus=2

set autoindent
set shiftwidth=4
set softtabstop=4
set expandtab

                                " Folding defaults
set foldnestmax=1
set foldminlines=5
noremap <silent>zl :foldopen<CR>
noremap <silent>zh :foldclose<CR>

set wrap
set textwidth=72                " Canonical right column
set hidden
set backspace=indent,eol,start

if exists('&colorcolumn')
    set colorcolumn=72
endif

set backupdir=$HOME/.vim/tmp/backup
set backup
set writebackup


" Directly borrowed from https://github.com/tpope/vim-sensible
set incsearch
if maparg('<C-L>', 'n') ==# ''  " Use <C-L> to clear search highlighting
  noremap <silent><C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" Do not restart from BOF when searching
set nowrapscan

set display+=lastline
set sessionoptions-=options

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j          " Delete comment character when
                                " joining commented lines
endif


let g:proj_flags='mstvcg'       " 'Project' flags
let g:proj_file='.config/vimproject'
let g:proj_split='vs'           " Split vertically

filetype plugin indent on

" Any private customizations go into vimrc-private
if filereadable($HOME . '/.vimrc-private')
    " Kept for backward compatibility
    source $HOME/.vimrc-private
else
    runtime vimrc-private
endif

if has('python3')
  " Vdebug customizations
  let g:vdebug_options = {
  \     'watch_window_style': 'compact',
  \ }
  let g:vdebug_features = {
  \     'max_data': 1024,
  \     'max_children': 128,
  \ }
  autocmd BufNew DebuggerStack set nowrap
else
  " Skip Vdebug loading if python is not available to avoid annoying
  " messages (see https://github.com/vim-vdebug/vdebug/pull/297)
  let g:is_vdebug_loaded=1
endif

if exists('*complete_info')
  inoremap <expr><cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr><cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

if has('nvim')
  au TermOpen * setlocal norelativenumber
  " Use lualine instead of lightline.vim
  let g:loaded_lightline = 1
else
  " No need to disable lualine: it is a Lua-only module
  " Append the git active branch to the status line
  let g:lightline = {
  \     'active': {
  \         'left': [ [ 'mode', 'paste' ],
  \                   [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \     },
  \     'component_function': {
  \         'gitbranch': 'gitbranch#name',
  \     },
  \ }
endif

if has('nvim-0.5')
  " Use nvim-lspconfig instead of vim-lsp
  let g:lsp_loaded = 1
else
  " Disable nvim-lspconfig
  let g:lspconfig = 1
  " Configure vim-lsp
  if executable('clangd')
    au User lsp_setup call lsp#register_server({
    \     'name': 'clangd',
    \     'cmd': {server_info->['clangd', '-background-index']},
    \     'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
    \ })
  endif

  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> gp <plug>(lsp-previous-diagnostic)
    nmap <buffer> gn <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)
    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
  endfunction

  augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
endif

" CltrP customizations
let g:ctrlp_custom_ignore = '\v/(framework|cms|vendor)$'

let &cpo=s:cpo_save
unlet s:cpo_save
